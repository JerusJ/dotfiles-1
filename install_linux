#!/usr/bin/env bash

set -e
set -u

# Version Vars
export GOLANG_VERSION=1.13.8
export ANSIBLE_VERSION=2.9.11
export KUBECTL_VERSION=1.17.0
export KUSTOMIZE_VERSION=3.5.2
export TERRAFORM_VERSION=0.13.2
export PACKER_VERSION=1.4.5
export HELM_VERSION=3.1.1
export JUMP_VERSION=0.30.1
export VAGRANT_VERSION=2.2.0

# Golang Vars
export GOPATH=/go
export GOROOT=/usr/local/go
export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

echo "--> Disabling Mouse Acceleration..."
cat <<EOF >/usr/share/X11/xorg.conf.d/50-mouse-acceleration.conf
Section "InputClass"
    Identifier "My Mouse"
    MatchIsPointer "yes"
    Option "AccelerationProfile" "-1"
    Option "AccelerationScheme" "none"
    Option "AccelSpeed" "-1"
EndSection
EOF

# Build/Network General Utilities
echo "--> Installing General Utilities..."
sudo apt-get update && sudo apt-get install -y --no-install-recommends \
  build-essential \
  git \
  ca-certificates \
  gcc \
  make \
  apt-transport-https \
  ca-certificates \
  curl \
  iproute2 \
  gnupg2 \
  software-properties-common \
  unzip \
  sshpass \
  bash \
  jq \
  openssh-client \
  libnss3-tools \
  curl \
  rbenv \
  python3-gpg

echo "--> Installing Golang..."
if [ ! -d /usr/local/go ]; then
  curl -L https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz |
    tar -xzvC /usr/local

  mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
else
  echo "--> Go Already installed, skipping..."
fi

echo "--> Installing Python..."
sudo apt-get install -y python3-pip python3-venv

echo "--> Installing Go Linters..."
go get -u \
  golang.org/x/tools/cmd/godoc \
  cmd/gofmt \
  golang.org/x/tools/cmd/goimports \
  golang.org/x/lint/golint || true

echo "--> Installing Node..."
curl -sL https://deb.nodesource.com/setup_12.x | bash -
sudo apt-get update && sudo apt-get install -y nodejs

echo "--> Installing Markdown Linters..."
npm install markdownlint &&
  npm cache clean --force

echo "--> Installing Terraform Linters..."
curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip && unzip tflint.zip && rm tflint.zip &&
  mv ./tflint* /usr/local/bin/tflint &&
  chmod +x /usr/local/bin/tflint

echo "--> Installing Pip Packages for Setup..."
pip3 install --no-cache-dir --upgrade \
  pip \
  setuptools \
  suds-jurko \
  requests

echo "--> Installing Python Packages for Linters..."
pip3 install --no-cache-dir \
  pylint \
  appdirs \
  attrs \
  click \
  entrypoints \
  flake8 \
  isort \
  mccabe \
  mypy-extensions \
  mypy \
  pycodestyle \
  pyflakes \
  toml \
  typed-ast \
  typing-extensions \
  unify \
  untokenize \
  yapf \
  ansible-lint \
  yamllint

echo "--> Installing Python Packages for Documentation..."
pip3 install --no-cache-dir \
  sphinx \
  sphinx_rtd_theme

echo "--> Installing Python Packages for Ansible..."
pip3 install --no-cache-dir \
  ansible==${ANSIBLE_VERSION} \
  molecule \
  pyvmomi \
  jmespath \
  pywinrm \
  pexpect \
  boto \
  boto3 \
  botocore

echo "--> Installing Python Packages for Tests..."
pip3 install --no-cache-dir \
  pytest \
  pytest-cov \
  pytest-dependency \
  pytest-timeout \
  pytest-html \
  pytest-selenium \
  pytest-xdist \
  kubernetes \
  testinfra \
  paramiko

echo "--> Installing Docker..."
sudo apt-get -y install docker.io

if [ ! -f /usr/local/bin/kubectl ]; then
  echo "--> Installing Kubectl ${KUBECTL_VERSION}..."
  curl -L -o /usr/local/bin/kubectl \
    https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl &&
    chmod +x /usr/local/bin/kubectl
fi

if [ ! -f /usr/local/bin/kustomize ]; then
  echo "--> Installing Kustomize ${KUSTOMIZE_VERSION}..."
  curl -L \
    https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz |
    tar -xzvC /usr/local/bin/
fi

if [ ! -f /usr/local/bin/terraform ]; then
  echo "--> Installing Terraform ${TERRAFORM_VERSION}..."
  curl -fsSL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o /tmp/terraform.zip &&
    unzip /tmp/terraform.zip -d /usr/local/bin &&
    rm /tmp/terraform.zip
fi

if [ ! -f /usr/local/bin/packer ]; then
  echo "--> Installing Packer ${PACKER_VERSION}..."
  curl -fsSl https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip -o /tmp/packer.zip &&
    unzip /tmp/packer.zip -d /usr/local/bin &&
    rm /tmp/packer.zip
fi

if [ ! -f /usr/local/bin/helm ]; then
  echo "--> Installing Helm ${HELM_VERSION}..."
  curl -L https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz |
    tar -xz &&
    mv linux-*/helm /usr/local/bin &&
    rm -rf linux-*
fi

if [ ! -f /usr/local/bin/vagrant ]; then
  echo "--> Installing Vagrant ${VAGRANT_VERSION}..."
  curl -fsSl https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_linux_amd64.zip /tmp/vagrant.zip &&
    unzip /tmp/vagrant.zip -d /usr/local/bin &&
    rm /tmp/vagrant.zip
fi

echo "--> Installing Personal Applications..."
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
sudo add-apt-repository -y ppa:lutris-team/lutris

sudo apt-get update -y
sudo apt-get install -y \
  code \
  vlc \
  youtube-dl \
  silversearcher-ag \
  steam \
  zsh \
  zsh-syntax-highlighting \
  zsh-autosuggestions \
  tree \
  bpython \
  virtualbox \
  virtualbox-ext-pack \
  vlc \
  lutris \
  redshift-gtk \
  kitty \
  fonts-firacode \
  nvidia-cuda-toolkit \
  pavucontrol

echo "--> Installing Mouse/DPI Utilities..."
sudo apt-get install -y \
  ratbagd \
  piper

echo "--> Installing i3 WM..."
sudo apt-get install -y \
  i3-wm \
  dunst \
  i3lock \
  i3status \
  suckless-tools \
  compton \
  hsetroot \
  xsel \
  rofi \
  fonts-noto \
  fonts-mplus \
  xsettingsd \
  lxappearance \
  scrot \
  viewnior

snap install \
  spotify \
  discord || true

wget https://github.com/gsamokovarov/jump/releases/download/v${JUMP_VERSION}/jump_${JUMP_VERSION}_amd64.deb
dpkg -i jump_${JUMP_VERSION}_amd64.deb
rm -f jump_${JUMP_VERSION}_amd64.deb

git clone https://github.com/rbenv/rbenv.git ~/.rbenv
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

echo "--> Setting up nvim to load .vimrc..."
NVIM_CONFIG_FILE_PATH=~/.config/nvim/init.vim
mkdir -p $(dirname ${NVIM_CONFIG_FILE_PATH})
if [ ! -f "${NVIM_CONFIG_FILE_PATH}" ]; then
  echo "--> Creating ${NVIM_CONFIG_FILE_PATH}..."
  cat <<EOF >~/.config/nvim/init.vim
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath
source ~/.vimrc
EOF
fi

echo "--> Installing Dropbox"
curl -L 'https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb' -o /tmp/dropbox.deb
dpkg -i /tmp/dropbox.deb
rm -f /tmp/dropbox.deb

echo "--> Installing Kitty Terminal Themes"
mkdir -p ~/.config/kitty
git clone --depth 1 git@github.com:dexpota/kitty-themes.git ~/.config/kitty/kitty-themes
ln -s ~/.config/kitty/kitty-themes/themes/gruvbox_dark.conf ~/.config/kitty/theme.conf

echo "--> Installing oh-my-zsh"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
