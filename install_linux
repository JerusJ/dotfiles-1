#!/usr/bin/env bash

set -e
set -u

# Version Vars
export GOLANG_VERSION=1.16.0
export ANSIBLE_VERSION=3.2.0
export KUBECTL_VERSION=1.20.0
export KUSTOMIZE_VERSION=4.0.5
export TERRAFORM_VERSION=0.14.9
export TERRAGRUNT_VERSION=0.28.18
export PACKER_VERSION=1.7.1
export HELM_VERSION=3.5.3
export JUMP_VERSION=0.30.1
export VAGRANT_VERSION=2.2.15

# Golang Vars
# export GOPATH=/go
# export GOROOT=/usr/local/go
# export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

# echo "--> Disabling Mouse Acceleration..."
# sudo cat <<EOF >/usr/share/X11/xorg.conf.d/50-mouse-acceleration.conf
# Section "InputClass"
#     Identifier "My Mouse"
#     MatchIsPointer "yes"
#     Option "AccelerationProfile" "-1"
#     Option "AccelerationScheme" "none"
#     Option "AccelSpeed" "-1"
# EndSection
# EOF

if [ ! -f /usr/local/bin/tflint ]; then
  echo "--> Installing Terraform Linters..."
  curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" &&
    -o tflint.zip &&
    unzip tflint.zip &&
    rm tflint.zip &&
    mv ./tflint* /usr/local/bin/tflint &&
    chmod +x /usr/local/bin/tflint
fi

echo "--> Installing Pip Packages for Setup..."
pip3 install --no-cache-dir --upgrade \
  pip \
  setuptools \
  suds-jurko \
  requests

echo "--> Installing Python Packages for Linters..."
pip3 install --no-cache-dir \
  pylint \
  appdirs \
  attrs \
  click \
  entrypoints \
  flake8 \
  isort \
  mccabe \
  mypy-extensions \
  mypy \
  pycodestyle \
  pyflakes \
  toml \
  typed-ast \
  typing-extensions \
  unify \
  untokenize \
  yapf \
  ansible-lint \
  yamllint

echo "--> Installing Python Packages for Documentation..."
pip install --no-cache-dir \
  sphinx \
  sphinx_rtd_theme

echo "--> Installing Python Packages for Ansible..."
pip install --no-cache-dir \
  ansible==${ANSIBLE_VERSION} \
  molecule \
  pyvmomi \
  jmespath \
  pywinrm \
  pexpect \
  boto \
  boto3 \
  botocore

echo "--> Installing Python Packages for Tests..."
pip install --no-cache-dir \
  pytest \
  pytest-cov \
  pytest-dependency \
  pytest-timeout \
  pytest-html \
  pytest-selenium \
  pytest-xdist \
  kubernetes \
  testinfra \
  paramiko

echo "--> Installing Docker..."
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

if [ ! -f /usr/local/bin/kubectl ]; then
  echo "--> Installing Kubectl ${KUBECTL_VERSION}..."
  sudo curl -L -o /usr/local/bin/kubectl \
    https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl &&
    sudo chmod +x /usr/local/bin/kubectl
fi

if [ ! -f /usr/local/bin/kustomize ]; then
  echo "--> Installing Kustomize ${KUSTOMIZE_VERSION}..."
  sudo curl -L \
    https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz |
    sudo tar -xzvC /usr/local/bin/
fi

if [ ! -f /usr/local/bin/terraform ]; then
  echo "--> Installing Terraform ${TERRAFORM_VERSION}..."
  sudo curl -fsSL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o /tmp/terraform.zip &&
    sudo unzip /tmp/terraform.zip -d /usr/local/bin &&
    rm -f /tmp/terraform.zip
fi

if [ ! -f /usr/local/bin/terragrunt ]; then
   echo "--> Installing Terragrunt ${TERRAGRUNT_VERSION}..."
   sudo curl -L -o /usr/local/bin/terragrunt \
     https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64 \
     && sudo chmod +x /usr/local/bin/terragrunt
fi

if [ ! -f /usr/local/bin/packer ]; then
  echo "--> Installing Packer ${PACKER_VERSION}..."
  sudo curl -fsSl https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip -o /tmp/packer.zip &&
    sudo unzip /tmp/packer.zip -d /usr/local/bin &&
    sudo rm /tmp/packer.zip
fi

if [ ! -f /usr/local/bin/helm ]; then
  echo "--> Installing Helm ${HELM_VERSION}..."
  sudo curl -L https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz |
    tar -xz &&
    sudo mv linux-*/helm /usr/local/bin &&
    sudo rm -rf linux-*
fi

if [ ! -f /usr/local/bin/vagrant ]; then
  echo "--> Installing Vagrant ${VAGRANT_VERSION}..."
  sudo curl -fsSl https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_linux_amd64.zip /tmp/vagrant.zip &&
    sudo unzip /tmp/vagrant.zip -d /usr/local/bin &&
    sudo rm /tmp/vagrant.zip
fi

wget https://github.com/gsamokovarov/jump/releases/download/v${JUMP_VERSION}/jump_${JUMP_VERSION}_amd64.deb
sudo dpkg -i jump_${JUMP_VERSION}_amd64.deb
sudo rm -f jump_${JUMP_VERSION}_amd64.deb

git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm || true

echo "--> Setting up nvim to load .vimrc..."
NVIM_CONFIG_FILE_PATH=~/.config/nvim/init.vim
mkdir -p $(dirname ${NVIM_CONFIG_FILE_PATH})
if [ ! -f "${NVIM_CONFIG_FILE_PATH}" ]; then
  echo "--> Creating ${NVIM_CONFIG_FILE_PATH}..."
  cat <<EOF >~/.config/nvim/init.vim
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath
source ~/.vimrc
EOF
fi
